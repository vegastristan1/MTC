Great! Here's a clear, **step-by-step guide to building a NodeJS + ReactJS dashboard** project — similar to how you'd scaffold a Laravel app.

This guide covers:

1. **Project Setup (Backend + Frontend)**
2. **Connecting to SQL Server (MSSQL)**
3. **Creating APIs in NodeJS**
4. **Fetching Data in ReactJS**

---

## 🧱 Project Structure (Recommended)

```
/my-dashboard
│
├── /server         ← NodeJS (Express) backend
└── /client         ← ReactJS frontend (dashboard UI)
```

---

## ✅ 1. Create Folder & Initialize Project

```bash
mkdir my-dashboard
cd my-dashboard
```

### 🛠 Step 1: Initialize Backend (NodeJS + Express)

```bash
mkdir server
cd server
npm init -y
```

### Install Required Packages

```bash
npm install express mssql dotenv cors
npm install --save-dev nodemon
```

Create a `server.js` or `index.js` file:

```bash
touch index.js
```

> Add this to your `package.json` for development:

```json
"scripts": {
  "start": "node index.js",
  "dev": "nodemon index.js"
}
```

---

## ✅ 2. Setup SQL Server Connection

### Create a `.env` file in `/server`:

```env
DB_USER=your_user
DB_PASSWORD=your_password
DB_SERVER=localhost
DB_DATABASE=your_database
```

### Create a config file `/server/db.js`:

```js
require('dotenv').config();
const sql = require('mssql');

const config = {
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  server: process.env.DB_SERVER,
  database: process.env.DB_DATABASE,
  options: {
    encrypt: false, // use true if you're using Azure
    trustServerCertificate: true,
  },
};

module.exports = config;
```

---

## ✅ 3. Build Express API (`/server/index.js`)

```js
const express = require('express');
const sql = require('mssql');
const cors = require('cors');
const config = require('./db');

const app = express();
app.use(cors());
app.use(express.json());

app.get('/api/users', async (req, res) => {
  try {
    await sql.connect(config);
    const result = await sql.query`SELECT * FROM Users`;
    res.json(result.recordset);
  } catch (err) {
    console.error(err);
    res.status(500).send('Database query failed');
  }
});

const PORT = 5000;
app.listen(PORT, () => console.log(`Server running on http://localhost:${PORT}`));
```

> ✅ This exposes a working API: `GET http://localhost:5000/api/users`

---

## ✅ 4. Create Frontend (ReactJS)

Go back to root folder:

```bash
cd ..
npx create-react-app client
cd client
```

Install Axios for API calls:

```bash
npm install axios
```

---

## ✅ 5. Connect Frontend to API

In `/client/src/App.js`, replace content:

```jsx
import React, { useEffect, useState } from 'react';
import axios from 'axios';

function App() {
  const [users, setUsers] = useState([]);

  useEffect(() => {
    axios.get('http://localhost:5000/api/users')
      .then(res => setUsers(res.data))
      .catch(err => console.error(err));
  }, []);

  return (
    <div>
      <h1>Users Dashboard</h1>
      <ul>
        {users.map(user => (
          <li key={user.ID}>{user.Name}</li>
        ))}
      </ul>
    </div>
  );
}

export default App;
```

---

## ✅ 6. Run Both Projects

### Start Backend

```bash
cd server
npm run dev
```

### Start Frontend

Open new terminal:

```bash
cd client
npm start
```

---

## ✅ 7. (Optional) Fix CORS & Proxy

### Option 1: Use `cors` in backend (already added)

```js
app.use(cors());
```

### Option 2: Add Proxy in React `/client/package.json`

```json
"proxy": "http://localhost:5000",
```

Now, React can just call `/api/users` without full URL.

---

## 🧪 Testing

* Visit: `http://localhost:3000`
* React fetches data from `NodeJS → SQL Server` and displays in dashboard.

---

## 🔒 Authentication (Later Stage)

Add JWT-based login in NodeJS using:

```bash
npm install jsonwebtoken bcryptjs
```

---

## 📌 Summary Commands

| Task                 | Command                                 |
| -------------------- | --------------------------------------- |
| Init backend         | `npm init -y`                           |
| Install backend deps | `npm install express mssql dotenv cors` |
| Start backend        | `npm run dev`                           |
| Create frontend      | `npx create-react-app client`           |
| Start frontend       | `npm start`                             |
| API test             | `GET http://localhost:5000/api/users`   |

---

## 🚀 Want a Starter Template?

If you'd like, I can generate a ready-to-use GitHub-style folder structure with boilerplate code. Just ask:

> "Give me a GitHub-style starter project for NodeJS + React + SQL Server"

Let me know!
